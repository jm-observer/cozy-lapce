name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: nightly
      step:
        description: "Which step to run: build / package"
        required: false
        default: build
      run_id:
        description: "Optional: run_id to fetch cozy-lapce-bin from (for package step)"
        required: false
        default: ""
  schedule:
    - cron: 0 0 * * *
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+*"]
  pull_request:
    paths:
      - .github/workflows/release.yml

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  tagname:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag.outputs.tag }}
    steps:
      - id: vars
        shell: bash
        run: echo "sha_short=${GITHUB_SHA::7}" | tee -a $GITHUB_OUTPUT

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" | tee -a $GITHUB_ENV

      - if: github.event_name == 'schedule' || github.event_name == 'pull_request'
        run: echo 'TAG_NAME=nightly-${{ steps.vars.outputs.sha_short }}' | tee -a $GITHUB_ENV

      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV

      - id: tag
        run: echo "tag=$TAG_NAME" | tee -a $GITHUB_OUTPUT

  windows-build:
    if: |
      github.event_name != 'workflow_dispatch' || github.event.inputs.step == 'build'
    runs-on: windows-latest
    needs: tagname
    env:
      RELEASE_TAG_NAME: ${{ needs.tagname.outputs.tag_name }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Update rust
        run: rustup update --no-self-update
      - name: Fetch dependencies
        run: cargo fetch --locked
      - name: Build
        run: cargo build --frozen --profile release-lto
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: cozy-lapce-bin
          path: ./target/release-lto/cozy-lapce.exe
          retention-days: 3

  windows-package-from-current-build:
    if: |
      github.event_name != 'workflow_dispatch' || github.event.inputs.step == 'build'
    runs-on: windows-latest
    needs:
      - tagname
      - windows-build
    env:
      RELEASE_TAG_NAME: ${{ needs.tagname.outputs.tag_name }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Download binary from current build
        uses: actions/download-artifact@v4
        with:
          name: cozy-lapce-bin
          path: ./target/release-lto

      - name: Create MSI
        run: |
          candle.exe -arch "x64" -ext WixUIExtension -ext WixUtilExtension \
            -out "./cozy-lapce.wixobj" "extra/windows/wix/cozy-lapce.wxs"
          light.exe -ext WixUIExtension -ext WixUtilExtension \
            -out "./CozyLapce-windows.msi" -sice:ICE61 -sice:ICE91 \
            "./cozy-lapce.wixobj"

      - name: Create portable zip
        shell: pwsh
        run: |
          Compress-Archive ./target/release-lto/cozy-lapce.exe ./CozyLapce-windows-portable.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lapce-windows
          path: |
            ./CozyLapce-windows-portable.zip
            ./CozyLapce-windows.msi
          retention-days: 3

  windows-package-from-previous-build:
    if: github.event.inputs.step == 'package'
    runs-on: windows-latest
    needs: tagname
    env:
      RELEASE_TAG_NAME: ${{ needs.tagname.outputs.tag_name }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Download previous build artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          name: cozy-lapce-bin
          path: ./target/release-lto
          run_id: ${{ github.event.inputs.run_id }}

      - name: Create MSI
        run: |
          candle.exe -arch "x64" -ext WixUIExtension -ext WixUtilExtension \
            -out "./cozy-lapce.wixobj" "extra/windows/wix/cozy-lapce.wxs"
          light.exe -ext WixUIExtension -ext WixUtilExtension \
            -out "./CozyLapce-windows.msi" -sice:ICE61 -sice:ICE91 \
            "./cozy-lapce.wixobj"

      - name: Create portable zip
        shell: pwsh
        run: |
          Compress-Archive ./target/release-lto/cozy-lapce.exe ./CozyLapce-windows-portable.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lapce-windows
          path: |
            ./CozyLapce-windows-portable.zip
            ./CozyLapce-windows.msi
          retention-days: 3

  publish-from-current-build:
    if: |
      github.event_name != 'workflow_dispatch' || github.event.inputs.step == 'build'
    needs:
      - tagname
      - windows-package-from-current-build
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - name: Set TAG_NAME
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_NAME=${{ github.event.inputs.tag_name }}" | tee -a $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo 'TAG_NAME=nightly' | tee -a $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME=${{ github.ref }}
            echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV
          fi

      - name: Delete existing nightly release and tag
        if: env.TAG_NAME == 'nightly'
        run: |
          gh release delete nightly --yes || true
          git push origin :nightly || true

      - name: Configure release
        run: |
          if [[ "$TAG_NAME" == "nightly" ]]; then
            echo 'SUBJECT=Lapce development build' | tee -a $GITHUB_ENV
            echo 'PRERELEASE=--prerelease' | tee -a $GITHUB_ENV
          else
            echo 'SUBJECT=Lapce release build' | tee -a $GITHUB_ENV
            echo 'PRERELEASE=' | tee -a $GITHUB_ENV
          fi

      - name: Publish release
        env:
          DEBUG: api
        run: |
          gh release create $TAG_NAME $PRERELEASE --title "$TAG_NAME" --target $GITHUB_SHA \
            lapce-windows/* || echo "Release already exists, skipping."

  publish-from-previous-build:
    if: github.event.inputs.step == 'package'
    needs:
      - tagname
      - windows-package-from-previous-build
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      - name: Set TAG_NAME
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_NAME=${{ github.event.inputs.tag_name }}" | tee -a $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo 'TAG_NAME=nightly' | tee -a $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME=${{ github.ref }}
            echo "TAG_NAME=${TAG_NAME#refs/tags/}" | tee -a $GITHUB_ENV
          fi

      - name: Delete existing nightly release and tag
        if: env.TAG_NAME == 'nightly'
        run: |
          gh release delete nightly --yes || true
          git push origin :nightly || true

      - name: Configure release
        run: |
          if [[ "$TAG_NAME" == "nightly" ]]; then
            echo 'SUBJECT=Lapce development build' | tee -a $GITHUB_ENV
            echo 'PRERELEASE=--prerelease' | tee -a $GITHUB_ENV
          else
            echo 'SUBJECT=Lapce release build' | tee -a $GITHUB_ENV
            echo 'PRERELEASE=' | tee -a $GITHUB_ENV
          fi

      - name: Publish release
        env:
          DEBUG: api
        run: |
          gh release create $TAG_NAME $PRERELEASE --title "$TAG_NAME" --target $GITHUB_SHA \
            lapce-windows/* || echo "Release already exists, skipping."
